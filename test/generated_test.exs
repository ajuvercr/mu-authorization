defmodule GeneratedSparqlTest do
  use ExUnit.Case

  @tag :generated
  test "basic query 1" do

    query = "SELECT * WHERE { ?s ?p ?o}"
    expected = %InterpreterTerms.SymbolMatch{symbol: :Sparql, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :QueryUnit, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Query, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Prologue, string: "", submatches: []}, %InterpreterTerms.SymbolMatch{symbol: :SelectQuery, string: "SELECT * WHERE { ?s ?p ?o}", submatches: [%InterpreterTerms.SymbolMatch{symbol: :SelectClause, string: "SELECT *", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "SELECT"}, %InterpreterTerms.WordMatch{external: %{}, whitespace: " ", word: "*"}]}, %InterpreterTerms.SymbolMatch{symbol: :WhereClause, string: " WHERE { ?s ?p ?o}", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "WHERE"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPattern, string: " { ?s ?p ?o}", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "{"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPatternSub, string: " ?s ?p ?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesBlock, string: "?s ?p ?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesSameSubjectPath, string: "?s ?p ?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?s", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?s", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?s", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :PropertyListPathNotEmpty, string: " ?p ?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VerbSimple, string: "?p", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?p", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?p", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :ObjectListPath, string: " ?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :ObjectPath, string: "?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphNodePath, string: "?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?o", submatches: :none}]}]}]}]}]}]}]}]}]}, %InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "}"}]}]}, %InterpreterTerms.SymbolMatch{symbol: :SolutionModifier, string: "", submatches: []}]}, %InterpreterTerms.SymbolMatch{symbol: :ValuesClause, string: "", submatches: []}]}]}]}

    actual = query |> TestHelper.parse


    assert TestHelper.match_ignore_whitespace_and_string(expected, actual)
  end


  @tag :generated
  test "basic query 2" do

    query = "SELECT * WHERE { GRAPH ?g { ?s ?p ?o} }"
    expected = %InterpreterTerms.SymbolMatch{symbol: :Sparql, string: "SELECT * WHERE { GRAPH ?g { ?s ?p ?o} }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :QueryUnit, string: "SELECT * WHERE { GRAPH ?g { ?s ?p ?o} }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Query, string: "SELECT * WHERE { GRAPH ?g { ?s ?p ?o} }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Prologue, string: "", submatches: []}, %InterpreterTerms.SymbolMatch{symbol: :SelectQuery, string: "SELECT * WHERE { GRAPH ?g { ?s ?p ?o} }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :SelectClause, string: "SELECT *", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "SELECT"}, %InterpreterTerms.WordMatch{external: %{}, whitespace: " ", word: "*"}]}, %InterpreterTerms.SymbolMatch{symbol: :WhereClause, string: " WHERE { GRAPH ?g { ?s ?p ?o} }", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "WHERE"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPattern, string: " { GRAPH ?g { ?s ?p ?o} }", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "{"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPatternSub, string: " GRAPH ?g { ?s ?p ?o}", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphPatternNotTriples, string: "GRAPH ?g { ?s ?p ?o}", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphGraphPattern, string: "GRAPH ?g { ?s ?p ?o}", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "GRAPH"}, %InterpreterTerms.SymbolMatch{symbol: :VarOrIri, string: " ?g", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?g", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?g", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPattern, string: " { ?s ?p ?o}", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "{"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPatternSub, string: " ?s ?p ?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesBlock, string: "?s ?p ?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesSameSubjectPath, string: "?s ?p ?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?s", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?s", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?s", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :PropertyListPathNotEmpty, string: " ?p ?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VerbSimple, string: "?p", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?p", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?p", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :ObjectListPath, string: " ?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :ObjectPath, string: "?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphNodePath, string: "?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?o", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?o", submatches: :none}]}]}]}]}]}]}]}]}]}, %InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "}"}]}]}]}]}, %InterpreterTerms.WordMatch{external: %{}, whitespace: " ", word: "}"}]}]}, %InterpreterTerms.SymbolMatch{symbol: :SolutionModifier, string: "", submatches: []}]}, %InterpreterTerms.SymbolMatch{symbol: :ValuesClause, string: "", submatches: []}]}]}]}

    actual = query |> TestHelper.parse


    assert TestHelper.match_ignore_whitespace_and_string(expected, actual)
  end


  @tag :generated
  test "basic query 3" do

    query = "SELECT ?title WHERE { <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title . }"
    expected = %InterpreterTerms.SymbolMatch{symbol: :Sparql, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :QueryUnit, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Query, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Prologue, string: "", submatches: []}, %InterpreterTerms.SymbolMatch{symbol: :SelectQuery, string: "SELECT ?title WHERE { <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title . }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :SelectClause, string: "SELECT ?title", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "SELECT"}, %InterpreterTerms.SymbolMatch{symbol: :Var, string: " ?title", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?title", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :WhereClause, string: " WHERE { <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title . }", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "WHERE"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPattern, string: " { <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title . }", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "{"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPatternSub, string: " <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesBlock, string: "<http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesSameSubjectPath, string: "<http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "<http://example.org/book/book1>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphTerm, string: "<http://example.org/book/book1>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :iri, string: "<http://example.org/book/book1>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :IRIREF, string: "<http://example.org/book/book1>", submatches: :none}]}]}]}, %InterpreterTerms.SymbolMatch{symbol: :PropertyListPathNotEmpty, string: " <http://purl.org/dc/elements/1.1/title> ?title", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VerbPath, string: "<http://purl.org/dc/elements/1.1/title>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Path, string: "<http://purl.org/dc/elements/1.1/title>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathAlternative, string: "<http://purl.org/dc/elements/1.1/title>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathSequence, string: "<http://purl.org/dc/elements/1.1/title>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathEltOrInverse, string: "<http://purl.org/dc/elements/1.1/title>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathElt, string: "<http://purl.org/dc/elements/1.1/title>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathPrimary, string: "<http://purl.org/dc/elements/1.1/title>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :iri, string: "<http://purl.org/dc/elements/1.1/title>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :IRIREF, string: "<http://purl.org/dc/elements/1.1/title>", submatches: :none}]}]}]}]}]}]}]}]}, %InterpreterTerms.SymbolMatch{symbol: :ObjectListPath, string: " ?title", submatches: [%InterpreterTerms.SymbolMatch{symbol: :ObjectPath, string: "?title", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphNodePath, string: "?title", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?title", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?title", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?title", submatches: :none}]}]}]}]}]}]}]}, %InterpreterTerms.WordMatch{external: %{}, whitespace: " ", word: "."}]}]}, %InterpreterTerms.WordMatch{external: %{}, whitespace: " ", word: "}"}]}]}, %InterpreterTerms.SymbolMatch{symbol: :SolutionModifier, string: "", submatches: []}]}, %InterpreterTerms.SymbolMatch{symbol: :ValuesClause, string: "", submatches: []}]}]}]}

    actual = query |> TestHelper.parse


    assert TestHelper.match_ignore_whitespace_and_string(expected, actual)
  end


  @tag :wip
  test "basic query 4" do

    query = "PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?name ?mbox WHERE { ?x foaf:name ?name . ?x foaf:mbox ?mbox }"
    expected = %InterpreterTerms.SymbolMatch{symbol: :Sparql, string: "PREFIX foaf:   <http://xmlns.com/foaf/0.1/>\n    SELECT ?name ?mbox\n    WHERE\n      { ?x foaf:name ?name .\n        ?x foaf:mbox ?mbox }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :QueryUnit, string: "PREFIX foaf:   <http://xmlns.com/foaf/0.1/>\n    SELECT ?name ?mbox\n    WHERE\n      { ?x foaf:name ?name .\n        ?x foaf:mbox ?mbox }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Query, string: "PREFIX foaf:   <http://xmlns.com/foaf/0.1/>\n    SELECT ?name ?mbox\n    WHERE\n      { ?x foaf:name ?name .\n        ?x foaf:mbox ?mbox }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Prologue, string: "PREFIX foaf:   <http://xmlns.com/foaf/0.1/>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PrefixDecl, string: "PREFIX foaf:   <http://xmlns.com/foaf/0.1/>", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "PREFIX"}, %InterpreterTerms.SymbolMatch{symbol: :PNAME_NS, string: " foaf:", submatches: :none}, %InterpreterTerms.SymbolMatch{symbol: :IRIREF, string: "   <http://xmlns.com/foaf/0.1/>", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :SelectQuery, string: "\n    SELECT ?name ?mbox\n    WHERE\n      { ?x foaf:name ?name .\n        ?x foaf:mbox ?mbox }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :SelectClause, string: "SELECT ?name ?mbox", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "SELECT"}, %InterpreterTerms.SymbolMatch{symbol: :Var, string: " ?name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?name", submatches: :none}]}, %InterpreterTerms.SymbolMatch{symbol: :Var, string: " ?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?mbox", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :WhereClause, string: "\n    WHERE\n      { ?x foaf:name ?name .\n        ?x foaf:mbox ?mbox }", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "WHERE"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPattern, string: "\n      { ?x foaf:name ?name .\n        ?x foaf:mbox ?mbox }", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "{"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPatternSub, string: " ?x foaf:name ?name .\n        ?x foaf:mbox ?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesBlock, string: "?x foaf:name ?name .\n        ?x foaf:mbox ?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesSameSubjectPath, string: "?x foaf:name ?name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?x", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?x", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?x", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :PropertyListPathNotEmpty, string: " foaf:name ?name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VerbPath, string: "foaf:name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Path, string: "foaf:name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathAlternative, string: "foaf:name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathSequence, string: "foaf:name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathEltOrInverse, string: "foaf:name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathElt, string: "foaf:name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathPrimary, string: "foaf:name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :iri, string: "foaf:name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PrefixedName, string: "foaf:name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PNAME_LN, string: "foaf:name", submatches: :none}]}]}]}]}]}]}]}]}]}, %InterpreterTerms.SymbolMatch{symbol: :ObjectListPath, string: " ?name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :ObjectPath, string: "?name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphNodePath, string: "?name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?name", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?name", submatches: :none}]}]}]}]}]}]}]}, %InterpreterTerms.WordMatch{external: %{}, whitespace: " ", word: "."}, %InterpreterTerms.SymbolMatch{symbol: :TriplesBlock, string: "\n        ?x foaf:mbox ?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesSameSubjectPath, string: "?x foaf:mbox ?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?x", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?x", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?x", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :PropertyListPathNotEmpty, string: " foaf:mbox ?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VerbPath, string: "foaf:mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Path, string: "foaf:mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathAlternative, string: "foaf:mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathSequence, string: "foaf:mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathEltOrInverse, string: "foaf:mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathElt, string: "foaf:mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PathPrimary, string: "foaf:mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :iri, string: "foaf:mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PrefixedName, string: "foaf:mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :PNAME_LN, string: "foaf:mbox", submatches: :none}]}]}]}]}]}]}]}]}]}, %InterpreterTerms.SymbolMatch{symbol: :ObjectListPath, string: " ?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :ObjectPath, string: "?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphNodePath, string: "?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?mbox", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?mbox", submatches: :none}]}]}]}]}]}]}]}]}]}]}, %InterpreterTerms.WordMatch{external: %{}, whitespace: " ", word: "}"}]}]}, %InterpreterTerms.SymbolMatch{symbol: :SolutionModifier, string: "", submatches: []}]}, %InterpreterTerms.SymbolMatch{symbol: :ValuesClause, string: "", submatches: []}]}]}]}

    actual = query |> TestHelper.parse


    assert TestHelper.match_ignore_whitespace_and_string(expected, actual)
  end


  @tag :generated
  test "basic select query 5" do

    query = "SELECT ?v WHERE { ?v ?p \"cat\" }"
    expected = %InterpreterTerms.SymbolMatch{symbol: :Sparql, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :QueryUnit, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Query, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Prologue, string: "", submatches: []}, %InterpreterTerms.SymbolMatch{symbol: :SelectQuery, string: "SELECT ?v WHERE { ?v ?p \"cat\" }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :SelectClause, string: "SELECT ?v", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "SELECT"}, %InterpreterTerms.SymbolMatch{symbol: :Var, string: " ?v", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?v", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :WhereClause, string: " WHERE { ?v ?p \"cat\" }", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "WHERE"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPattern, string: " { ?v ?p \"cat\" }", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "{"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPatternSub, string: " ?v ?p \"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesBlock, string: "?v ?p \"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesSameSubjectPath, string: "?v ?p \"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?v", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?v", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?v", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :PropertyListPathNotEmpty, string: " ?p \"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VerbSimple, string: "?p", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?p", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?p", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :ObjectListPath, string: " \"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :ObjectPath, string: "\"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphNodePath, string: "\"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "\"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphTerm, string: "\"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :RDFLiteral, string: "\"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :String, string: "\"cat\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :STRING_LITERAL2, string: "\"cat\"", submatches: :none}]}]}]}]}]}]}]}]}]}]}]}, %InterpreterTerms.WordMatch{external: %{}, whitespace: " ", word: "}"}]}]}, %InterpreterTerms.SymbolMatch{symbol: :SolutionModifier, string: "", submatches: []}]}, %InterpreterTerms.SymbolMatch{symbol: :ValuesClause, string: "", submatches: []}]}]}]}

    actual = query |> TestHelper.parse


    assert TestHelper.match_ignore_whitespace_and_string(expected, actual)
  end


  @tag :generated
  test "basic select query 6" do

    query = "SELECT ?v WHERE { ?v ?p \"abc\"^^<http://example.org/datatype#specialDatatype> }"
    expected = %InterpreterTerms.SymbolMatch{symbol: :Sparql, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :QueryUnit, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Query, string: "SELECT ?title\n    WHERE\n    {\n      <http://example.org/book/book1> <http://purl.org/dc/elements/1.1/title> ?title .\n    }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Prologue, string: "", submatches: []}, %InterpreterTerms.SymbolMatch{symbol: :SelectQuery, string: "SELECT ?v WHERE { ?v ?p \"abc\"^^<http://example.org/datatype#specialDatatype> }", submatches: [%InterpreterTerms.SymbolMatch{symbol: :SelectClause, string: "SELECT ?v", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "SELECT"}, %InterpreterTerms.SymbolMatch{symbol: :Var, string: " ?v", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?v", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :WhereClause, string: " WHERE { ?v ?p \"abc\"^^<http://example.org/datatype#specialDatatype> }", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "WHERE"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPattern, string: " { ?v ?p \"abc\"^^<http://example.org/datatype#specialDatatype> }", submatches: [%InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "{"}, %InterpreterTerms.SymbolMatch{symbol: :GroupGraphPatternSub, string: " ?v ?p \"abc\"^^<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesBlock, string: "?v ?p \"abc\"^^<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :TriplesSameSubjectPath, string: "?v ?p \"abc\"^^<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "?v", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?v", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?v", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :PropertyListPathNotEmpty, string: " ?p \"abc\"^^<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VerbSimple, string: "?p", submatches: [%InterpreterTerms.SymbolMatch{symbol: :Var, string: "?p", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VAR1, string: "?p", submatches: :none}]}]}, %InterpreterTerms.SymbolMatch{symbol: :ObjectListPath, string: " \"abc\"^^<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :ObjectPath, string: "\"abc\"^^<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphNodePath, string: "\"abc\"^^<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :VarOrTerm, string: "\"abc\"^^<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :GraphTerm, string: "\"abc\"^^<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :RDFLiteral, string: "\"abc\"^^<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :String, string: "\"abc\"", submatches: [%InterpreterTerms.SymbolMatch{symbol: :STRING_LITERAL2, string: "\"abc\"", submatches: :none}]}, %InterpreterTerms.WordMatch{external: %{}, whitespace: "", word: "^^"}, %InterpreterTerms.SymbolMatch{symbol: :iri, string: "<http://example.org/datatype#specialDatatype>", submatches: [%InterpreterTerms.SymbolMatch{symbol: :IRIREF, string: "<http://example.org/datatype#specialDatatype>", submatches: :none}]}]}]}]}]}]}]}]}]}]}]}, %InterpreterTerms.WordMatch{external: %{}, whitespace: " ", word: "}"}]}]}, %InterpreterTerms.SymbolMatch{symbol: :SolutionModifier, string: "", submatches: []}]}, %InterpreterTerms.SymbolMatch{symbol: :ValuesClause, string: "", submatches: []}]}]}]}

    actual = query |> TestHelper.parse


    assert TestHelper.match_ignore_whitespace_and_string(expected, actual)
  end

end
